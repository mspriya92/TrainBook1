name: SphereJsonUpdateNew
 
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to use'
        required: true
        
 
jobs:
  update-json:
    runs-on: self-hosted  
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
 
      #- name: Print initial nsi.json content
        #run: |
          #echo "Initial nsi.json content:"
          #if (Test-Path nsi.json) {
            #Get-Content nsi.json
          #} else {
            #Write-Host "nsi.json does not exist in the repository."
          #}
        #shell: powershell
 
      - name: Download nsi.json from external source
        run: |
          echo "Downloading nsi.json from external source"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/mspriya92/TrainBook1/main/nsi.json" -OutFile "nsinew.json"
        shell: powershell
 
      #- name: Print downloaded nsi.json content
        #run: |
          #echo "Downloaded nsi.json content:"
          #Get-Content nsinew.json
        #shell: powershell
      - name: Set environmental variable
        run: |
          if ($env:environment -eq 'Prod'){
            $API_KEY = $env:prod_API_KEY
          }

          # Set repo secrets
          #DOCKER_USERNAME = $env:DOCKER_USERNAME 
          #DOCKER_PASSWORD = $env:DOCKER_PASSWORD 
          
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          prod_API_KEY: ${{ secrets.API_KEY }}
      - name: Update nsi.json with secrets
        #env:
          #DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          #DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          #prod_API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "Updating nsi.json with secrets"
          $json = Get-Content nsinew.json -Raw | ConvertFrom-Json
          $json.DockerUsername = "$env:DOCKER_USERNAME"
          $json.DockerPassword = "$env:DOCKER_PASSWORD"
          $json.APIkey = $API_KEY
          $json | ConvertTo-Json | Set-Content -Path nsinew.json
        shell: powershell
 
      - name: Print updated nsi.json content
        run: |
          echo "Updated nsi.json content:"
          Get-Content nsinew.json
        shell: powershell
